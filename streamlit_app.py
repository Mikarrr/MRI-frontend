import streamlit as st
import torch
import numpy as np
import io
from PIL import Image
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import requests
import tempfile
import os
import json
from urllib.parse import urljoin
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Konfiguracja strony
st.set_page_config(
    layout="wide", 
    page_title="üß† Brain MRI Segmentation AI",
    page_icon="üß†"
)

# Style CSS dla interfejsu
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        text-align: center;
        margin-bottom: 2rem;
        color: #2c3e50;
        font-weight: bold;
    }
    .sub-header {
        font-size: 1.8rem;
        color: #34495e;
        margin-top: 1.5rem;
        margin-bottom: 1rem;
        border-bottom: 2px solid #3498db;
        padding-bottom: 0.5rem;
    }
    .results-container {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        margin-bottom: 1rem;
    }
    .metric-card {
        background: transparent;
        padding: 1.5rem;
        border-radius: 0.8rem;
        box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
        border-left: 4px solid #3498db;
    }
    .model-card {
        background: transparent;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 2px solid #e9ecef;
        margin-bottom: 0.5rem;
        transition: all 0.3s ease;
    }
    .model-card:hover {
        border-color: #3498db;
        box-shadow: 0 0.25rem 0.5rem rgba(52, 152, 219, 0.2);
    }
    .class-legend {
        display: flex;
        align-items: center;
        margin: 0.5rem 0;
        padding: 0.5rem;
        border-radius: 0.3rem;
        background: #f8f9fa;
    }
    .color-box {
        width: 20px;
        height: 20px;
        border-radius: 3px;
        margin-right: 10px;
        border: 1px solid #ccc;
    }
    .status-indicator {
        display: inline-block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
    }
    .status-online { background-color: #27ae60; }
    .status-offline { background-color: #e74c3c; }
    .status-loading { background-color: #f39c12; }
</style>
""", unsafe_allow_html=True)

# Definicje modeli
MODELS_CONFIG = {
    "unet_standard": {
        "name": "üéØ U-Net Standard",
        "description": "Podstawowy model U-Net z standardowymi parametrami",
        "checkpoint": "best_unet_model.pth",
        "input_size": (256, 256),
        "features": ["Szybka predykcja", "Dobra og√≥lna jako≈õƒá", "Stabilny"],
        "recommended_for": "Og√≥lne zastosowania diagnostyczne"
    },
    "unet_enhanced": {
        "name": "‚ö° U-Net Enhanced", 
        "description": "Ulepszona wersja z wiƒôkszƒÖ liczbƒÖ filtr√≥w i attention",
        "checkpoint": "best_unet_enhanced.pth",
        "input_size": (256, 256),
        "features": ["Wy≈ºsza dok≈Çadno≈õƒá", "Lepsze wykrywanie detali", "Attention mechanism"],
        "recommended_for": "Precyzyjna analiza zmian patologicznych"
    },
    "unet_deep": {
        "name": "üî¨ U-Net Deep",
        "description": "G≈Çƒôboka architektura dla najwy≈ºszej precyzji",
        "checkpoint": "best_unet_deep.pth", 
        "input_size": (512, 512),
        "features": ["Najwy≈ºsza dok≈Çadno≈õƒá", "Wysoka rozdzielczo≈õƒá", "Zaawansowana architektura"],
        "recommended_for": "Badania naukowe i przypadki skomplikowane"
    }
}

# Definicje klas segmentacji - zgodne z Twoim modelem
CLASS_DEFINITIONS = {
    0: {
        "name": "T≈Ço",
        "description": "Obszary nie bƒôdƒÖce tkankƒÖ m√≥zgowƒÖ",
        "color": [0, 0, 0],
        "hex": "#000000"
    },
    1: {
        "name": "Nekrotyczny rdze≈Ñ",
        "description": "Nekrotyczny rdze≈Ñ guza (NCR/NET)",
        "color": [255, 0, 0],
        "hex": "#FF0000"
    },
    2: {
        "name": "Obrzƒôk oko≈Çoguzowy", 
        "description": "Obrzƒôk wok√≥≈Ç guza (ED)",
        "color": [0, 255, 0],
        "hex": "#00FF00"
    },
    3: {
        "name": "Aktywny guz",
        "description": "Aktywne tkanka guza (ET)",
        "color": [0, 0, 255],
        "hex": "#0000FF"
    }
}

# Inicjalizacja sesji
if 'prediction' not in st.session_state:
    st.session_state.prediction = None
if 'uploaded_image' not in st.session_state:
    st.session_state.uploaded_image = None
if 'metrics' not in st.session_state:
    st.session_state.metrics = None
if 'selected_model' not in st.session_state:
    st.session_state.selected_model = "unet_standard"
if 'server_status' not in st.session_state:
    st.session_state.server_status = "unknown"

# Tytu≈Ç aplikacji
st.markdown("<h1 class='main-header'> Brain MRI Segmentation AI</h1>", unsafe_allow_html=True)

# Funkcja sprawdzania statusu serwera
def check_server_status(server_url):
    """Sprawdza czy serwer Flask jest dostƒôpny"""
    try:
        response = requests.get(f"{server_url}/health", timeout=5)
        if response.status_code == 200:
            return "online", response.json()
        else:
            return "offline", None
    except Exception as e:
        return "offline", str(e)

# Funkcja normalizujƒÖca obraz
def normalize_image(img):
    """Normalizacja obrazu MRI dla lepszej wizualizacji"""
    img_np = np.array(img.convert('L'))
    img_min, img_max = img_np.min(), img_np.max()
    if img_max > img_min:
        img_np = ((img_np - img_min) / (img_max - img_min) * 255).astype(np.uint8)
    else:
        img_np = np.zeros_like(img_np, dtype=np.uint8)
    return Image.fromarray(img_np)

# Funkcja do generowania kolorowej maski
def colorize_mask(mask):
    """Generuje kolorowƒÖ maskƒô na podstawie predykcji"""
    rgb_mask = np.zeros((mask.shape[0], mask.shape[1], 3), dtype=np.uint8)
    for class_id, class_info in CLASS_DEFINITIONS.items():
        rgb_mask[mask == class_id] = class_info["color"]
    return rgb_mask

# Funkcja po≈ÇƒÖczenia zdjƒôcia z maskƒÖ z odpowiedniƒÖ przezroczysto≈õciƒÖ
def overlay_masks(image, mask, alpha=0.6):
    """Nak≈Çada kolorowƒÖ maskƒô na oryginalny obraz"""
    image = np.array(image.convert('RGB'))
    
    # Upewnij siƒô, ≈ºe oba obrazy majƒÖ ten sam rozmiar
    if image.shape[:2] != mask.shape[:2]:
        mask = Image.fromarray(mask)
        mask = mask.resize((image.shape[1], image.shape[0]), Image.NEAREST)
        mask = np.array(mask)
    
    # Nak≈Çadka maski na obraz
    blended = image.copy()
    colored_mask = colorize_mask(mask)
    mask_indices = mask > 0  # Indeksy, gdzie maska ma warto≈õci niezerowe
    
    # Nak≈Çadka tylko tam, gdzie maska ma warto≈õci
    blended_pixels = mask_indices[:, :, np.newaxis].repeat(3, axis=2)
    blended[blended_pixels] = (alpha * colored_mask[blended_pixels] + 
                             (1 - alpha) * image[blended_pixels]).astype(np.uint8)
    
    return blended

# Funkcja do predykcji z serwerem Flask
def predict_with_flask_server(image, server_url, model_name):
    """Wysy≈Ça obraz do serwera Flask i otrzymuje predykcjƒô"""
    try:
        # Konweruj obraz do bajt√≥w
        img_bytes = io.BytesIO()
        # Upewnij siƒô, ≈ºe obraz jest w trybie RGB lub L
        if image.mode not in ['RGB', 'L']:
            image = image.convert('L')
        image.save(img_bytes, format='PNG')
        img_bytes.seek(0)
        
        # Przygotowanie pliku do wys≈Çania
        files = {'file': ('brain_scan.png', img_bytes, 'image/png')}
        data = {'model': model_name}  # Wy≈õlij informacjƒô o wybranym modelu
        
        # Wys≈Çanie ≈ºƒÖdania do serwera Flask
        response = requests.post(f"{server_url}/predict", files=files, data=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                prediction_mask = np.array(result['segmentation_mask'])
                metrics = result['metrics']
                info = result.get('info', {})
                return prediction_mask, metrics, info
            else:
                st.error(f"B≈ÇƒÖd predykcji: {result.get('error', 'Nieznany b≈ÇƒÖd')}")
                return None, None, None
        else:
            st.error(f"B≈ÇƒÖd serwera: {response.status_code}")
            st.error(response.text)
            return None, None, None
            
    except requests.exceptions.Timeout:
        st.error("Przekroczono limit czasu - serwer nie odpowiada")
        return None, None, None
    except Exception as e:
        st.error(f"WystƒÖpi≈Ç b≈ÇƒÖd: {str(e)}")
        return None, None, None

# Funkcja do tworzenia wykresu rozk≈Çadu klas
def create_class_distribution_chart(metrics):
    """Tworzy wykres rozk≈Çadu klas w segmentacji"""
    if 'class_distribution' not in metrics:
        return None
        
    class_data = metrics['class_distribution']
    
    labels = []
    values = []
    colors = []
    
    for class_id, class_info in CLASS_DEFINITIONS.items():
        class_name = class_info['name']
        if class_name in class_data:
            labels.append(class_name)
            values.append(class_data[class_name]['percentage'])
            colors.append(class_info['hex'])
    
    fig = go.Figure(data=[go.Pie(
        labels=labels,
        values=values,
        marker=dict(colors=colors),
        textinfo='label+percent',
        textposition='auto',
        hovertemplate='<b>%{label}</b><br>Procent: %{percent}<br>Piksele: %{customdata}<extra></extra>',
        customdata=[class_data[cls]['pixel_count'] for cls in labels if cls in class_data]
    )])
    
    fig.update_layout(
        title="Rozk≈Çad klas w segmentacji",
        showlegend=True,
        height=400
    )
    
    return fig

# === G≈Å√ìWNY INTERFEJS ===

# Sidebar - konfiguracja
with st.sidebar:
    st.markdown("###  Konfiguracja")
    
    # URL serwera
    server_url = st.text_input(
        " URL serwera Flask:",
        value="http://localhost:5000",
        help="Adres serwera z uruchomionym modelem"
    )
    
    # Sprawdzenie statusu serwera
    if st.button(" Sprawd≈∫ status serwera"):
        with st.spinner("Sprawdzam serwer..."):
            status, info = check_server_status(server_url)
            st.session_state.server_status = status
            
            if status == "online":
                st.success(" Serwer jest dostƒôpny!")
                if info:
                    st.json(info)
            else:
                st.error(" Serwer niedostƒôpny")
    
    # Wy≈õwietl aktualny status
    status_color = {
        "online": "status-online",
        "offline": "status-offline", 
        "unknown": "status-loading"
    }
    
    st.markdown(f"""
    <div style="margin: 1rem 0;">
        <span class="status-indicator {status_color.get(st.session_state.server_status, 'status-loading')}"></span>
        Status serwera: <strong>{st.session_state.server_status.upper()}</strong>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Legenda klas
    st.markdown("###  Legenda klas")
    for class_id, class_info in CLASS_DEFINITIONS.items():
        st.markdown(f"""
        <div class="class-legend">
            <div class="color-box" style="background-color: {class_info['hex']};"></div>
            <div>
                <strong>{class_info['name']}</strong><br>
                <small>{class_info['description']}</small>
            </div>
        </div>
        """, unsafe_allow_html=True)

# G≈Ç√≥wna czƒô≈õƒá aplikacji
col1, col2 = st.columns([1, 2])

# Panel lewy - upload i wyb√≥r modelu
with col1:
    st.markdown("<h2 class='sub-header'> Upload obrazu MRI</h2>", unsafe_allow_html=True)
    
    # Wyb√≥r modelu
    st.markdown("###  Wyb√≥r modelu AI")
    
    for model_key, model_info in MODELS_CONFIG.items():
        is_selected = st.session_state.selected_model == model_key
        
        # Klasa CSS w zale≈ºno≈õci od wyboru
        card_style = "model-card" + (" selected-model" if is_selected else "")
        
        with st.container():
            if st.radio(
                "Wybierz model:",
                [model_key],
                format_func=lambda x: MODELS_CONFIG[x]["name"],
                key=f"radio_{model_key}",
                index=0 if is_selected else -1,
                label_visibility="collapsed"
            ):
                st.session_state.selected_model = model_key
            
            # Szczeg√≥≈Çy modelu
            if is_selected:
                st.markdown(f"""
                <div class="model-card">
                    <h4>{model_info['name']}</h4>
                    <p>{model_info['description']}</p>
                    <strong>Zalecane dla:</strong> {model_info['recommended_for']}<br>
                    <strong>Rozmiar wej≈õcia:</strong> {model_info['input_size'][0]}x{model_info['input_size'][1]}
                    <br><strong>Cechy:</strong>
                    <ul>{''.join([f'<li>{feature}</li>' for feature in model_info['features']])}</ul>
                </div>
                """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Upload pliku
    uploaded_file = st.file_uploader(
        "üìÅ Wybierz zdjƒôcie MRI do analizy", 
        type=["png", "jpg", "jpeg", "tiff", "tif"],
        help="Obs≈Çugiwane formaty: PNG, JPG, JPEG, TIFF"
    )
    
    if uploaded_file is not None:
        try:
            # Wczytanie i wy≈õwietlenie przes≈Çanego zdjƒôcia
            image = Image.open(uploaded_file)
            
            # Normalizacja zdjƒôcia dla lepszej wizualizacji
            normalized_image = normalize_image(image)
            
            # Wy≈õwietlenie przes≈Çanego zdjƒôcia
            st.image(normalized_image, caption=" Przes≈Çany obraz MRI", use_container_width=True)
            
            # Informacje o obrazie
            st.markdown(f"""
            ** Informacje o obrazie:**
            - Rozmiar: {image.size[0]} x {image.size[1]} px
            - Tryb: {image.mode}
            - Format: {image.format or 'N/A'}
            """)
            
            # Zapisanie zdjƒôcia do stanu sesji
            st.session_state.uploaded_image = normalized_image
            
            # Przycisk do analizy zdjƒôcia
            if st.button("üîç Analizuj obraz MRI", type="primary", use_container_width=True):
                if st.session_state.server_status != "online":
                    st.warning("‚ö†Ô∏è Sprawd≈∫ czy serwer jest dostƒôpny przed analizƒÖ")
                else:
                    with st.spinner(f"üß† Analizujƒô obraz u≈ºywajƒÖc modelu {MODELS_CONFIG[st.session_state.selected_model]['name']}..."):
                        # Wywo≈Çanie predykcji z serwerem Flask
                        mask, metrics, info = predict_with_flask_server(
                            normalized_image, 
                            server_url, 
                            st.session_state.selected_model
                        )
                        
                        if mask is not None and metrics is not None:
                            st.session_state.prediction = mask
                            st.session_state.metrics = metrics
                            st.session_state.prediction_info = info
                            st.success("‚úÖ Analiza zako≈Ñczona pomy≈õlnie!")
                            st.balloons()
                        else:
                            st.error("‚ùå Nie uda≈Ço siƒô wykonaƒá analizy")
        
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd podczas przetwarzania obrazu: {str(e)}")

# Panel prawy - wyniki analizy
with col2:
    st.markdown("<h2 class='sub-header'>üìä Wyniki segmentacji</h2>", unsafe_allow_html=True)
    
    if st.session_state.prediction is not None and st.session_state.uploaded_image is not None:
        # Wyniki wizualne
        result_col1, result_col2 = st.columns(2)
        
        with result_col1:
            st.markdown("#### üé® Maska segmentacji")
            colored_mask = colorize_mask(st.session_state.prediction)
            st.image(colored_mask, caption="Kolorowa maska segmentacji", use_container_width=True)
            
        with result_col2:
            st.markdown("#### üñºÔ∏è Nak≈Çadka na orygina≈Ç")
            overlay = overlay_masks(st.session_state.uploaded_image, st.session_state.prediction)
            st.image(overlay, caption="Segmentacja na≈Ço≈ºona na orygina≈Ç", use_container_width=True)
        
        # Szczeg√≥≈Çowe metryki
        st.markdown("#### üìà Metryki jako≈õci modelu")
        
        metrics = st.session_state.metrics
        
        # G≈Ç√≥wne metryki
        main_metrics_cols = st.columns(3)
        
        with main_metrics_cols[0]:
            st.markdown(f"""
            <div class="metric-card">
                <h3 style="color: #e74c3c;"> Dice Score</h3>
                <h1 style="color: #2c3e50;">{metrics.get('mean_dice', 'N/A'):.4f}</h1>
                <p>≈örednia ze wszystkich klas</p>
            </div>
            """, unsafe_allow_html=True)
            
        with main_metrics_cols[1]:
            st.markdown(f"""
            <div class="metric-card">
                <h3 style="color: #3498db;"> IoU (Jaccard)</h3>
                <h1 style="color: #2c3e50;">{metrics.get('mean_iou', 'N/A'):.4f}</h1>
                <p>Intersection over Union</p>
            </div>
            """, unsafe_allow_html=True)
            
        with main_metrics_cols[2]:
            st.markdown(f"""
            <div class="metric-card">
                <h3 style="color: #27ae60;"> Pixel Accuracy</h3>
                <h1 style="color: #2c3e50;">{metrics.get('mean_pixel_accuracy', 'N/A'):.4f}</h1>
                <p>Dok≈Çadno≈õƒá pikselowa</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Wykres rozk≈Çadu klas
        if 'class_distribution' in metrics:
            st.markdown("####  Rozk≈Çad wykrytych klas")
            
            # Tworzenie wykresu ko≈Çowego
            distribution_fig = create_class_distribution_chart(metrics)
            if distribution_fig:
                st.plotly_chart(distribution_fig, use_container_width=True)
        
        # Szczeg√≥≈Çowe metryki dla ka≈ºdej klasy
        if 'class_metrics' in metrics:
            st.markdown("####  Szczeg√≥≈Çowe metryki dla klas")
            
            # Stw√≥rz DataFrame dla lepszego wy≈õwietlania
            class_data = []
            for class_name, class_metrics in metrics['class_metrics'].items():
                class_data.append({
                    'Klasa': class_name,
                    'Dice': f"{class_metrics.get('dice', 0):.4f}",
                    'IoU': f"{class_metrics.get('iou', 0):.4f}",
                    'Pixel Accuracy': f"{class_metrics.get('pixel_accuracy', 0):.4f}"
                })
            
            # Wy≈õwietl jako tabelƒô
            import pandas as pd
            df = pd.DataFrame(class_data)
            st.dataframe(df, use_container_width=True)
        
        # Informacje techniczne
        if hasattr(st.session_state, 'prediction_info') and st.session_state.prediction_info:
            with st.expander("üîß Informacje techniczne"):
                info = st.session_state.prediction_info
                st.json(info)
                    
    else:
        st.markdown("""
        <div class="results-container">
            <div style="text-align: center; padding: 2rem;">
                <h3> Gotowy do analizy!</h3>
                <p>Prze≈õlij obraz MRI i wybierz model, aby rozpoczƒÖƒá segmentacjƒô.</p>
                <br>
                <h4> Kroki:</h4>
                <ol style="text-align: left; display: inline-block;">
                    <li>Sprawd≈∫ status serwera w panelu bocznym</li>
                    <li>Wybierz odpowiedni model AI</li>
                    <li>Prze≈õlij obraz MRI</li>
                    <li>Kliknij "Analizuj obraz MRI"</li>
                </ol>
            </div>
        </div>
        """, unsafe_allow_html=True)

# Dodatkowe informacje
with st.expander("üìö Informacje o modelach i klasach"):
    st.markdown("""
    ### ü§ñ Dostƒôpne modele:
    
    **üéØ U-Net Standard** - Podstawowy model zapewniajƒÖcy szybkie i stabilne wyniki dla wiƒôkszo≈õci przypadk√≥w diagnostycznych.
    
    **‚ö° U-Net Enhanced** - Ulepszona wersja z mechanizmami uwagi, zapewniajƒÖca wy≈ºszƒÖ dok≈Çadno≈õƒá wykrywania szczeg√≥≈Ç√≥w patologicznych.
    
    **üî¨ U-Net Deep** - Najzaawansowana architektura dla przypadk√≥w wymagajƒÖcych najwy≈ºszej precyzji i analizy wysokiej rozdzielczo≈õci.
    
    ### üß† Klasy segmentacji:
    
    Model zosta≈Ç wytrenowany do identyfikacji nastƒôpujƒÖcych struktur w obrazach MRI m√≥zgu:
    
    - **T≈Ço (czarny)**: Obszary nie bƒôdƒÖce tkankƒÖ m√≥zgowƒÖ
    - **Nekrotyczny rdze≈Ñ (czerwony)**: NCR/NET - obszary nekrotyczne i nie wzmacniajƒÖce siƒô czƒô≈õci guza
    - **Obrzƒôk oko≈Çoguzowy (zielony)**: ED - obrzƒôk wok√≥≈Ç guza
    - **Aktywny guz (niebieski)**: ET - aktywnie wzmacniajƒÖce siƒô czƒô≈õci guza
    
    ### üìä Metryki:
    
    - **Dice Score**: Miara podobie≈Ñstwa miƒôdzy predykcjƒÖ a rzeczywisto≈õciƒÖ (0-1, wy≈ºsze = lepsze)
    - **IoU (Intersection over Union)**: Stosunek czƒô≈õci wsp√≥lnej do sumy obszar√≥w (0-1, wy≈ºsze = lepsze)  
    - **Pixel Accuracy**: Procent poprawnie sklasyfikowanych pikseli (0-1, wy≈ºsze = lepsze)
    """)

# Informacje w stopce
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #7f8c8d; margin-top: 2rem;">
    üß† <strong>Brain MRI Segmentation AI</strong> | 
    Powered by U-Net Deep Learning | 
    üî¨ Narzƒôdzie wspomagajƒÖce diagnostykƒô medycznƒÖ
</div>
""", unsafe_allow_html=True)